#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\begin_preamble
% Bibliografia en español
\usepackage[fixlanguage]{babelbib}
\selectbiblanguage{spanish}

% Bibliografia
\usepackage[authoryear,square,sort]{natbib}
\bibliographystyle{plainnat}
\bibpunct{[}{]}{,}{a}{}{;}
\renewcommand\cite{\citep}
\end_preamble
\options journal
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Aprendizaje Automático o Machine Learning
\end_layout

\begin_layout Standard
En 1959 Arthur Samuel en una publicación escribió: 
\shape italic

\begin_inset Quotes eld
\end_inset

Programming computers to learn from experience should eventually eliminate
 the need for much of this detailed programming effort
\begin_inset Quotes erd
\end_inset


\shape default
 
\begin_inset CommandInset citation
LatexCommand cite
key "Arthur1959"

\end_inset

.
 Lo que nos lleva a pensar que uno pioneros del aprendizaje automático ya
 dejaba visualizar que los programas, a partir del aprendizaje sobre los
 datos históricos (la experiencia), podrían efectuar tareas de toma de decisione
s sin ser programadas explícitamente dichas decisiones.
 Samuel define al aprendizaje automático como sigue: 
\shape italic

\begin_inset Quotes eld
\end_inset

El aprendizaje automático es un campo de estudio que da a las computadoras
 la capacidad de aprender sin ser explícitamente programadas
\begin_inset Quotes erd
\end_inset


\shape default
.
\end_layout

\begin_layout Standard
Otro investigador de aprendizaje automático Tom Mitchell propuso en 1998
 la siguiente definición: 
\shape italic

\begin_inset Quotes eld
\end_inset

Well posed Learning Problem: A computer program is said to learn from experience
 E with respect to some task T and some performance measure P, if its performanc
e on T, as measured by P, improves with experience E
\begin_inset Quotes erd
\end_inset


\shape default
.
 Donde se nos indica que el aprendizaje en las máquinas deberá ser parecido
 al aprendizaje en los humanos, por ejemplo cuando una criatura comienza
 a hablar a través de la experiencia de pronunciar las palabras y de su
 interacción con otras personas, entonces sucede que su capacidad de hablar
 se va perfeccionando o mejorando.
\end_layout

\begin_layout Subsection
Definición
\end_layout

\begin_layout Standard

\shape italic
\begin_inset Quotes eld
\end_inset

The purpose of machine learning is to learn from training data in order
 to make as good as possible predictions on new, unseen, data
\begin_inset Quotes erd
\end_inset


\shape default

\begin_inset CommandInset citation
LatexCommand cite
key "Jean2016"

\end_inset

.
\end_layout

\begin_layout Standard
La dificultad radica en que debemos construir modelos que nos acerquen a
 una buan predicción sobre datos aún no conocidos o imprevistos.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figuras/mldef.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Definición presentada por Peter Prettenhofer y Gille Louppe.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Categoría de algoritmos
\end_layout

\begin_layout Standard
Los algoritmos de aprendizaje automático se pueden categorizar según la
 forma en que se realiza el aprendizaje, pero teniendo en cuenta que todos
 reciben un conjunto de ejemplos para aprender desde los mismos.
\end_layout

\begin_layout Subsubsection
Aprendizaje supervisado (supervised learning): El algoritmo recibe datos
 de entrenamiento que contienen la respuesta correcta para cada ejemplo.
\end_layout

\begin_layout Subsubsection
Aprendizaje no supervisado (unsupervised learning): El algoritmo busca estructur
as en los datos de entrenamiento, como encontrar qué ejemplos son similares
 entre sí, y agruparlos en clusters.
\end_layout

\begin_layout Subsection
Tipos de problemas
\end_layout

\begin_layout Standard
Teniendo en cuenta las clases de problemas que los algoritmos de aprendizaje
 pueden resolver, los tipos de problemas se pueden agrupar como sigue.
\end_layout

\begin_layout Subsubsection
Regresión: Un problema de aprendizaje supervisado donde la respuesta a aprender
 es un valor continuo.
\end_layout

\begin_layout Subsubsection
Clasificación: Un problema de aprendizaje supervisado donde la respuesta
 a aprender es un valor de un conjunto finito de posibles valores discretos.
 Classifiation learning is sometimes called supervised, because, in a sense,
 the scheme operates under supervision by being provided with the actual
 outcome for each of the training examples
\end_layout

\begin_layout Subsubsection
Segmentación: Un problema de aprendizaje no supervisado donde la estructura
 a aprender es un conjunto de clusters donde cada cluster tiene similares
 ejemplos.
\end_layout

\begin_layout Subsubsection
Análisis de red: Un problema de aprendizaje no supervisado donde la estructura
 a aprender es información acerca de la importancia y el rol de los nodos
 en una red.
\end_layout

\begin_layout Subsection
Componentes esenciales
\end_layout

\begin_layout Subsubsection
Ejemplos o instancias (examples): La entrada de un esquema de aprendizaje
 automático es un conjunto de instancias.
 Estas instancias son las cosas que deben ser clasificadas, asociadas o
 agrupadas.
 En el escenario estándar, cada instancia es un ejemplo individual e independien
te del concepto que se debe aprender.
\end_layout

\begin_layout Subsubsection
Características o atributos (features): Las instancias son caracterizadas
 mediante los valores de un conjunto predeterminado de atributos.
 Cada instancia proporciona una entrada al aprendizaje automático es caracteriza
do por los valores en un conjunto fijo y predefinido de características
 o atributos 
\begin_inset CommandInset citation
LatexCommand cite
key "DM2011"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Etiquetas (labels): Las cantidades nominales tienen valores que son símbolos
 distintos.
 Los valores mismos sirven como etiquetas o nombres, de ahí el término nominal,
 que viene de la palabra latina para nombre.
 Los atributos nominales a veces se llaman categorizados, enumerados o discretos.
\end_layout

\begin_layout Subsubsection
Conjunto de entrenamiento (training set): 
\end_layout

\begin_layout Subsubsection
Algoritmos de aprendizaje (learning algorithms): Hipótesis, Parámetros,
 Función de costo, Objetivo.
\end_layout

\begin_layout Subsubsection
Conjunto de prueba (test set): Para predecir el rendimiento de un clasificador
 sobre nuevos datos, necesitamos evaluar su tasa de error en un conjunto
 de datos que no desempeñó ningún papel en la formación del clasificador.
 Este conjunto de datos independiente se denomina conjunto de prueba.
\end_layout

\begin_layout Subsection
El problema de la clasificación
\end_layout

\begin_layout Standard
En los problemas de clasificación el modelo creado debe predecir la clase,
 tipo o categoría de la salida.
\end_layout

\begin_layout Subsubsection
Clasificación binaria (binary classification): En su forma más simple se
 reduce a la pregunta: dado un patrón x extraído de un dominio X, estimar
 qué valor asumirá una variable aleatoria binaria asociada y ∈ {± 1} 
\begin_inset CommandInset citation
LatexCommand cite
key "IntroML2008"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Clasificación multiclase (multiclass classification): Es la extensión lógica
 de la clasificación binaria.
 La principal diferencia es que ahora y ∈ {1, ...
 , N} puede asumir un rango de valores diferentes 
\begin_inset CommandInset citation
LatexCommand cite
key "IntroML2008"

\end_inset

.
\end_layout

\begin_layout Subsection
Algoritmos de clasificación en WEKA
\end_layout

\begin_layout Standard
Weka es una colección de algoritmos de aprendizaje automático para tareas
 de minería de datos.
 Los algoritmos pueden ser aplicados directamente a un conjunto de datos
 o llamados desde código Java.
 Weka contiene herramientas para pre-procesamiento de datos, clasificación,
 regresión, clustering, reglas de asociación y visualización.
 También es adecuado para desarrollar nuevos esquemas de aprendizaje automático
 
\begin_inset CommandInset citation
LatexCommand cite
key "Weka3"

\end_inset

.
 Los algoritmos de clasificación de Weka que se utilizarán es el siguiente
 
\begin_inset CommandInset citation
LatexCommand cite
key "WekaCla"

\end_inset

:
\end_layout

\begin_layout Subsubsection
BayesNet: Bayes Network learning using various search algorithms and quality
 measures.
 Base class for a Bayes Network classifier.
 Provides datastructures (network structure, conditional probability distributio
ns, etc.) and facilities common to Bayes Network learning algorithms like
 K2 and B.
\end_layout

\begin_layout Subsubsection
NaiveBayes: Class for a Naive Bayes classifier using estimator classes.
 Numeric estimator precision values are chosen based on analysis of the
 training data.
 For this reason, the classifier is not an UpdateableClassifier (which in
 typical usage are initialized with zero training instances).
\end_layout

\begin_layout Subsubsection
NaiveBayesUpdateable: Class for a Naive Bayes classifier using estimator
 classes.
 This is the updateable version of NaiveBayes.
 This classifier will use a default precision of 0.1 for numeric attributes
 when buildClassifier is called with zero training instances.
\end_layout

\begin_layout Subsubsection
Logistic: Class for building and using a multinomial logistic regression
 model with a ridge estimator.
 If there are k classes for n instances with m attributes, the parameter
 matrix B to be calculated will be an m*(k-1) matrix.
\end_layout

\begin_layout Subsubsection
MultilayerPerceptron: A Classifier that uses backpropagation to classify
 instances.
 This network can be built by hand, created by an algorithm or both.
 The network can also be monitored and modified during training time.
 The nodes in this network are all sigmoid (except for when the class is
 numeric in which case the the output nodes become unthresholded linear
 units).
\end_layout

\begin_layout Subsubsection
SimpleLogistic: Classifier for building linear logistic regression models.
 LogitBoost with simple regression functions as base learners is used for
 fitting the logistic models.
 The optimal number of LogitBoost iterations to perform is cross-validated,
 which leads to automatic attribute selection.
\end_layout

\begin_layout Subsubsection
SMO: Implements John Platt's sequential minimal optimization algorithm for
 training a support vector classifier.
 This implementation globally replaces all missing values and transforms
 nominal attributes into binary ones.
 It also normalizes all attributes by default.
 (In that case the coefficients in the output are based on the normalized
 data, not the original data --- this is important for interpreting the
 classifier).
 Multi-class problems are solved using pairwise classification (aka 1-vs-1).
 To obtain proper probability estimates, use the option that fits calibration
 models to the outputs of the support vector machine.
 In the multi-class case, the predicted probabilities are coupled using
 Hastie and Tibshirani's pairwise coupling method.
\end_layout

\begin_layout Subsubsection
OneR: Class for building and using a 1R classifier; in other words, uses
 the minimum-error attribute for prediction, discretizing numeric attributes.
\end_layout

\begin_layout Subsubsection
DecisionTable: Class for building and using a simple decision table majority
 classifier.
\end_layout

\begin_layout Subsubsection
JRip: This class implements a propositional rule learner, Repeated Incremental
 Pruning to Produce Error Reduction (RIPPER), which was proposed by William
 W.
 Cohen as an optimized version of IREP.
 
\end_layout

\begin_layout Subsubsection
PART: Class for generating a PART decision list.
 Uses separate-and-conquer.
 Builds a partial C4.5 decision tree in each iteration and makes the "best"
 leaf into a rule.
\end_layout

\begin_layout Subsubsection
ZeroR: Class for building and using a 0-R classifier.
 Predicts the mean (for a numeric class) or the mode (for a nominal class).
\end_layout

\begin_layout Subsubsection
DecisionStump: Class for building and using a decision stump.
 Usually used in conjunction with a boosting algorithm.
 Does regression (based on mean-squared error) or classification (based
 on entropy).
 Missing is treated as a separate value.
\end_layout

\begin_layout Subsubsection
J48: Class for generating a pruned or unpruned C4.5 decision tree.
\end_layout

\begin_layout Subsubsection
LMT: Classifier for building 'logistic model trees', which are classification
 trees with logistic regression functions at the leaves.
 The algorithm can deal with binary and multi-class target variables, numeric
 and nominal attributes and missing values.
\end_layout

\begin_layout Subsubsection
RandomForest: Class for constructing a forest of random trees.
\end_layout

\begin_layout Subsubsection
RandomTree: Class for constructing a tree that considers K randomly chosen
 attributes at each node.
 Performs no pruning.
 Also has an option to allow estimation of class probabilities (or target
 mean in the regression case) based on a hold-out set (backfitting).
 
\end_layout

\begin_layout Subsubsection
REPTree: Fast decision tree learner.
 Builds a decision/regression tree using information gain/variance and prunes
 it using reduced-error pruning (with backfitting).
 Only sorts values for numeric attributes once.
 Missing values are dealt with by splitting the corresponding instances
 into pieces (i.e.
 as in C4.5).
\end_layout

\begin_layout Subsection
Evaluación de lo aprendido
\end_layout

\begin_layout Standard
La evaluación es la clave para lograr avances reales en el aprendizaje automátic
o.
 
\end_layout

\begin_layout Subsubsection
Cross Validation
\end_layout

\begin_layout Subsubsection
Stratifid k-fold Cross Validation
\end_layout

\begin_layout Subsubsection
Percentage split
\end_layout

\begin_layout Subsection
Resultados de la evaluación
\end_layout

\begin_layout Standard
Para los problemas de clasificación, es natural medir el rendimiento de
 un clasificador en términos de la tasa de error (error rate).
 El clasificador predice la clase de cada instancia: si es correcta, se
 cuenta como un éxito; sino, es un error.
 La tasa de error es sólo la proporción de errores cometidos sobre un conjunto
 de instancias, y mide el rendimiento general del clasificador.
 Por supuesto, lo que nos interesa es el probable desempeño futuro en nuevos
 datos, no el rendimiento pasado en datos antiguos.
 Ya sabemos las clasificaciones de cada instancia en el conjunto de entrenamient
o, que después de todo es por qué podemos usarlo para el entrenamiento.
 La tasa de error en el conjunto de entrenamiento no es probable que sea
 un buen indicador de rendimiento futuro debido a que el clasificador se
 ha aprendido de los mismos datos de entrenamiento, cualquier estimación
 de rendimiento basada en esos datos será optimista, incluso excesivamente
 optimista.
\end_layout

\begin_layout Standard
La tasa de error en los datos de entrenamiento se llama error de resustitución
 porque se calcula resusstituyendo las instancias de entrenamiento en un
 clasificador que se construyó a partir de ellas.
 Para predecir el rendimiento de un clasificador en nuevos datos, necesitamos
 evaluar su tasa de error en un conjunto de datos que no desempeñó ningún
 papel en la formación del clasificador.
 Este conjunto de datos independiente se denomina conjunto de pruebas.
\end_layout

\begin_layout Subsubsection
correct() - number of correctly classified instances (see also incorrect())
\end_layout

\begin_layout Subsubsection
pctCorrect() - percentage of correctly classified instances (see also pctIncorre
ct())
\end_layout

\begin_layout Subsubsection
kappa() - Kappa statistics
\end_layout

\begin_layout Subsubsection
meanAbsoluteError() - the mean absolute error
\end_layout

\begin_layout Subsubsection
rootMeanSquaredError() - the root mean squared error
\end_layout

\begin_layout Subsubsection
unclassified() - number of unclassified instances
\end_layout

\begin_layout Subsubsection
pctUnclassified() - percentage of unclassified instances
\end_layout

\begin_layout Subsubsection
ROC curves
\end_layout

\begin_layout Subsubsection
Tasa de error (error rate): on the testing data.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "C:/Users/Tecnologia/Documents/GitHub/tesispaper/BibliografiaPaper"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
